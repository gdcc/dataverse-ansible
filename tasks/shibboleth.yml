---
# dataverse/tasks/dataverse-shibboleth.yml

- name: install shibboleth
  debug:
    msg: '##### SHIBBOLETH #####'

- name: set distribution-specific variables
  set_fact:
    shibboleth_user: "{{ (ansible_os_family == 'RedHat') | ternary ('shibd', '_shibd') }}"

- name: install shibboleth repo for Rocky 8
  ansible.builtin.copy:
    src: 'shibboleth.rocky8.repo'
    dest: /etc/yum.repos.d/shibboleth.repo
    owner: root
    group: root
    mode: 0644
  when: ansible_distribution == "Rocky" and
        ansible_distribution_major_version == "8"

- name: install shibboleth repo for Rocky 9
  ansible.builtin.copy:
    src: 'shibboleth.rocky9.repo'
    dest: /etc/yum.repos.d/shibboleth.repo
    owner: root
    group: root
    mode: 0644
  when: ansible_distribution == "Rocky" and
        ansible_distribution_major_version == "9"

- name: install shibboleth repo for RHEL/CentOS 8
  ansible.builtin.copy:
    src: 'shibboleth.centos8.repo'
    dest: /etc/yum.repos.d/shibboleth.repo
    owner: root
    group: root
    mode: 0644
  when: (ansible_distribution == "RedHat" and ansible_distribution_major_version == "8")
     or (ansible_distribution == "CentOS" and ansible_distribution_major_version == "8")

- name: install Shibboleth RPMs for RHEL and derivatives
  ansible.builtin.package:
    name: shibboleth
    state: latest
  when: ansible_os_family == "RedHat"

- name: install Shibboleth for Debian/Ubuntu
  package:
    name: shibboleth-sp2-utils, libapache2-mod-shib2, libapache2-mod-jk
    state: latest
  when: ansible_os_family == "Debian"

- name: install shibboleth2.xml template
  template: src=shibboleth2.xml.j2 dest=/etc/shibboleth/shibboleth2.xml
        owner=root group=root mode=0644
  notify:
    - enable and restart shibd

- name: copy attribute-map.xml file
  copy: src=attribute-map.xml dest=/etc/shibboleth/attribute-map.xml
        owner=root group=root mode=0644
  notify: enable and restart shibd

- name: openssl configuration for shibboleth certificate
  template: src=shibboleth-openssl.cnf.j2 dest=/etc/shibboleth/openssl.cnf backup=yes
  register: shibboleth_openssl_conf

- name: generate shibboleth certificate
  shell: cd /etc/shibboleth/; openssl req -new -x509 -days 3652 -nodes -out sp-cert.pem -keyout sp-key.pem -batch -config openssl.cnf
         creates=/etc/shibboleth/sp-cert.pem
  when: shibboleth_openssl_conf.changed
  notify: enable and restart shibd

- name: set shibboleth certificate permissions
  file: path=/etc/shibboleth/sp-key.pem owner="{{ shibboleth_user }}"
  notify: enable and restart shibd

- name: copy TestShib IdP metadata XML file
  copy: src=dataverse-idp-metadata.xml dest=/etc/shibboleth/dataverse-idp-metadata.xml
        owner=root group=root mode=0644
  notify:
    - enable and restart apache
    - enable and restart shibd

- name: get shibAuthProvider.json to host
  get_url:
    url: http://guides.dataverse.org/en/{{ dataverse.version if dataverse_branch == 'release' else 'latest' }}/_static/installation/files/etc/shibboleth/shibAuthProvider.json
    dest: /tmp/shibAuthProvider.json
  register: shibAuthProvider_json_download

- name: enable shibboleth authentication in dataverse
  uri:
    url: http://localhost:8080/api/admin/authenticationProviders
    method: POST
    src: /tmp/shibAuthProvider.json
    body_format: json
    remote_src: yes
    status_code: 201
  when: shibAuthProvider_json_download.changed

- name: enable apache shib module on Debian
  apache2_module:
    state: present
    name: "{{ item }}"
  with_items:
    - shib2
  when: ansible_os_family == "Debian"    ## CHECKME -- does this need to be Debian-specific?
  notify: enable and restart apache

# /etc/httpd/conf.d/shib.conf also loads the module, but is not guaranteed to do so before http.proxy.conf checks the mod_shib variable
- name: load shib module on RedHat
  copy:
    src: "00-shib.conf"
    dest: "/etc/httpd/conf.modules.d/"
  when: ansible_os_family == "RedHat"
  notify: enable and restart apache

- set_fact:
    selinux_enabled: "{{ ansible_selinux is defined and ansible_selinux != False and ansible_selinux.status == 'enabled' }}"

- name: upload mod_shib-to-shibd.te and installer
  copy:
    src: '{{ item.file }}'
    dest: '/tmp'
    mode: '{{ item.mode }}'
  with_items:
    - { file: mod_shib-to-shibd.te, mode: '0400' }
    - { file: install-mod_shib-to-shibd.sh, mode: '0700' }
  when: selinux_enabled

- name: install the policy to allow mod_shib to talk to shibd
  command:
    cmd: '/tmp/install-mod_shib-to-shibd.sh'
    chdir: '/tmp'
  when: selinux_enabled

- name: remove policy files after install
  file:
    path: '/tmp/{{ item }}'
    state: absent
  with_items:
    - install-mod_shib-to-shibd.sh
    - mod_shib-to-shibd.te
    - mod_shib-to-shibd.pp
    - mod_shib-to-shibd.mod
  when: selinux_enabled
