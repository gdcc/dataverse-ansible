---
# dataverse/tasks/solr.yml

- name: install solr
  debug:
    msg: '##### SOLR #####'

- name: ensure EPEL repository for RedHat/Rocky
  yum: name=epel-release state=latest
  when: ansible_os_family == "RedHat"

- name: install Solr pre-reqs for RedHat/Rocky
  ansible.builtin.package:
    name: ['java-{{ java.version }}-openjdk-devel', 'lsof', 'zip']
    state: latest
  when: ansible_os_family == "RedHat"

- name: create solr service group
  group: name="{{ dataverse.solr.group }}" state=present
  when: dataverse.solr.group != "root"

- name: create solr service account
  user: name="{{ dataverse.solr.user }}" group="{{ dataverse.solr.group }}"
        createhome=no comment="Dataverse Solr user"
  when: dataverse.solr.user != "root"

- name: Set default solr download url
  set_fact:
    solr_download_url: "https://archive.apache.org/dist/solr/solr/{{ dataverse.solr.version }}/solr-{{ dataverse.solr.version }}.tgz"
  when: dataverse.solr.download_url is not defined

- name: Set custom solr download url
  set_fact:
    solr_download_url: "{{ dataverse.solr.download_url }}"
  when: dataverse.solr.download_url is defined

- name: download and unzip solr
  get_url:
    url: "{{ solr_download_url }}"
    checksum: "{{ dataverse.solr.checksum }}"
    dest: /tmp/solr-{{ dataverse.solr.version }}.tgz
  register: solr_installer_download

- name: untar solr
  unarchive:
    src: /tmp/solr-{{ dataverse.solr.version }}.tgz
    remote_src: true
    dest: /tmp
  when: solr_installer_download.changed

- name: remove solr root directory
  file: path="{{ dataverse.solr.root }}" state=absent
  when: solr_installer_download.changed

- name: ensure solr directory exists
  file: path="{{ dataverse.solr.root }}" state=directory
        owner=root group=root mode=0755

- name: copy solr distro files into solr root
  shell: "/bin/cp -r /tmp/solr-{{ dataverse.solr.version }}/* {{ dataverse.solr.root }}"
  when: solr_installer_download.changed

- name: mitigate CVE-2021-44228
  ansible.builtin.lineinfile:
    path: '{{ dataverse.solr.root}}/bin/solr.in.sh'
    line: 'SOLR_OPTS="$SOLR_OPTS -Dlog4j2.formatMsgNoLookups=true"'
    state: present

- name: remove JndiLookup.class from log4j-core.jar
  ansible.builtin.shell:
    cmd: 'zip -q -d {{ dataverse.solr.root }}/server/lib/ext/log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class'
  become: yes
  become_user: root
  ignore_errors: yes

- name: solr doesn't create its log directory until runtime
  file: path="{{ dataverse.solr.root }}/server/logs" state=directory
        owner="{{ dataverse.solr.user }}" group="{{ dataverse.solr.group }}" mode=0755

- name: populate collection1
  shell: "/bin/cp -r {{ dataverse.solr.root }}/server/solr/configsets/_default {{ dataverse.solr.root }}/server/solr/collection1"
  when: solr_installer_download.changed

- name: chown some subdirectories to solr service account
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    owner: "{{ dataverse.solr.user }}"
    group: "{{ dataverse.solr.group }}"
  with_items:
    - "{{ dataverse.solr.root }}/bin"
    - "{{ dataverse.solr.root }}/server/solr/collection1"
    - "{{ dataverse.solr.root }}/server/solr/filestore"
    - "{{ dataverse.solr.root }}/server/solr/userfiles"

- name: clean up solr distro files
  file: path="/tmp/solr-{{ dataverse.solr.version }}" state=absent

- name: "release: identify solr schema files"
  find:
    paths: /tmp/dvinstall/
    file_type: file
    use_regex: yes
    recurse: yes
    patterns: 'schema*'
  register: solr_release_files
  when: dataverse_branch == "release"

- name: "release: place solr schema"
  copy:
    src: '{{ item }}'
    dest: "{{ dataverse.solr.root }}/server/solr/collection1/conf/"
    owner: "{{ dataverse.solr.user }}"
    group: "{{ dataverse.solr.group }}"
    mode: 0644
    remote_src: yes
  with_items:
  - "{{ solr_release_files.files | map(attribute='path') | list }}"
  when: dataverse_branch == "release" and
        solr_release_files is defined

- name: "branch: identify solr schema files"
  find:
    paths: '{{ dataverse.srcdir }}/conf/solr/'
    file_type: file
    use_regex: yes
    recurse: yes
    patterns: 'schema*'
  register: solr_files
  when: dataverse_branch != "release"

- name: "branch: place solr schema files"
  copy:
    src: '{{ item }}'
    dest: '{{ dataverse.solr.root }}/server/solr/collection1/conf'
    owner: '{{ dataverse.solr.user }}'
    group: '{{ dataverse.solr.group }}'
    mode: 0644
    remote_src: yes
  with_items:
  - "{{ solr_files.files | map(attribute='path') | list }}"
  when: dataverse_branch != "release" and
        solr_files is defined

- name: "release: place solrconfig"
  copy:
        src: "/tmp/dvinstall/solrconfig.xml"
        dest: "{{ dataverse.solr.root }}/server/solr/collection1/conf/"
        owner: "{{ dataverse.solr.user }}"
        group: "{{ dataverse.solr.group }}"
        mode: 0644
        remote_src: yes
  when: dataverse_branch == "release"

- name: "branch: place solrconfig"
  copy:
        src: "{{ dataverse.srcdir }}/conf/solr/{{ dataverse.solr.version }}/solrconfig.xml"
        dest: "{{ dataverse.solr.root }}/server/solr/collection1/conf/"
        owner: "{{ dataverse.solr.user }}"
        group: "{{ dataverse.solr.group }}"
        mode: 0644
        remote_src: yes
  when: dataverse_branch != "release"

#- name: adjust jetty.xml requestHeaderSize
#  replace:
#        dest: "{{ dataverse.solr.root }}/server/etc/jetty.xml"
#        regexp: >-
#           '(\s+.*)\"solr\.jetty\.request\.header\.size\" default=\"8192\"(\s+.*)'
#        replace: >-
#           \1'\"solr\.jetty\.request\.header\.size\" default=\"102400\"'\2
#        backup: yes

# because vagrant VM still has ansible-1.9
- name: remove requestHeaderSize
  lineinfile:
        dest: "{{ dataverse.solr.root }}/server/etc/jetty.xml"
        regexp: "requestHeaderSize"
        state: absent

- name: insert requestHeaderSize
  lineinfile:
        dest: "{{ dataverse.solr.root }}/server/etc/jetty.xml"
        line: '    <Set name="requestHeaderSize"><Property name="solr.jetty.request.header.size" default="102400" /></Set>'
        insertafter: "outputAggregationSize"
        state: present

- name: install solr upstart script for Debian/Ubuntu
  copy: src=solr.conf dest=/etc/init owner=root group=root mode=0644
  when: ansible_os_family == "Debian"

- name: install solr systemd conf file for RedHat/Rocky
  template: src=solr.service.j2 dest=/usr/lib/systemd/system/solr.service
        owner=root group=root mode=0644
  when: ansible_os_family == "RedHat"

- name: install solr systemd conf file for Debian
  template: src=solr.service.j2 dest=/etc/systemd/system/solr.service
        owner=root group=root mode=0644
  when: ansible_os_family == "Debian"

- name: increase resource limits for solr
  blockinfile:
    path: /etc/security/limits.conf
    block: |
      {{ item.user }} {{ item.type }} {{ item.descriptor }} {{ item.value }}
    marker: '# {mark} ANSIBLE MANAGED BLOCK {{ item.user }} {{ item.type }} {{ item.descriptor }}'
  with_items:
    - { user: "{{ dataverse.solr.user }}", type: soft, descriptor: nproc, value: 65000 }
    - { user: "{{ dataverse.solr.user }}", type: hard, descriptor: nproc, value: 65000 }
    - { user: "{{ dataverse.solr.user }}", type: soft, descriptor: nofile, value: 65000 }
    - { user: "{{ dataverse.solr.user }}", type: hard, descriptor: nofile, value: 65000 }

- name: create collection1 on startup
  lineinfile:
    path: '{{ dataverse.solr.root }}/server/solr/collection1/core.properties'
    line: 'name=collection1'
    state: present
    create: yes

- name: reload systemd
  shell: systemctl daemon-reload
#  when: ansible_os_family == "RedHat"

- name: enable solr on boot, start solr
  service: name=solr enabled=yes state=started
#  when: ansible_os_family == "RedHat"

- name: disable service account shell
  user:
    name: '{{ dataverse.solr.user }}'
    shell: /sbin/nologin

- name: set solr_url, use variables later
  set_fact:
    solr_url: 'http://localhost:8983'
