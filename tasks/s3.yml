---

- ansible.builtin.import_tasks: aws_cli.yml

- name: ensure dot dir exists
  file:
    path: '~{{ dataverse.payara.user }}/.aws'
    state: directory
    owner: '{{ dataverse.payara.user }}'
    group: '{{ dataverse.payara.group }}'
    mode: '0700'
    
- name: place aws credentials
  template:
    src: aws_credentials.j2
    dest: '~{{ dataverse.payara.user }}/.aws/credentials'
    owner: '{{ dataverse.payara.user }}'
    group: '{{ dataverse.payara.group }}'
    mode: '0600'

- name: place aws config
  template:
    src: aws_config.j2
    dest: '~{{ dataverse.payara.user }}/.aws/config'
    owner: '{{ dataverse.payara.user }}'
    group: '{{ dataverse.payara.group }}'
    mode: '0600'

- name: set s3 settings in dataverse
  shell: 'asadmin-create-or-replace-option.sh "{{ item.key }}" "{{ item.value }}"'
  register: output
  changed_when: "'Command create-jvm-options executed successfully.' in output.stdout"
  when:
   - item.value is defined
   - item.value != ''
  with_items:
   - key: dataverse.files.storage-driver-id
     value: "{{ s3.storage_driver_id }}"
   - key: dataverse.files.s3.type
     value: "{{ s3.files_type }}"
   - key: dataverse.files.s3.label
     value: "{{ s3.label }}"
   - key: dataverse.files.s3.bucket-name
     value: "{{ s3.bucket_name }}"
   - key: dataverse.files.s3.url-expiration-minutes
     value: "{{ s3.url_expiration_minutes }}"
   - key: dataverse.files.s3.upload-redirect
     value: "{{ s3.upload_redirect }}"
   - key: dataverse.files.s3.path-style-access
     value: "{{ s3.path_style_access }}"
   - key: dataverse.files.s3.payload-signing
     value: "{{ s3.payload_signing }}"
   - key: dataverse.files.s3.chunked-encoding
     value: "{{ s3.chunked_encoding }}"
   - key: dataverse.files.s3.custom-endpoint-region
     value: "{{ s3.custom_endpoint_region }}"

# optional s3 settings

- name: expose custom_endpoint_url as variable
  set_fact:
    custom_endpoint_url: '{{ s3.custom_endpoint_url }}'

- ansible.builtin.import_tasks: s3_custom_endpoint_url.yml
  when: custom_endpoint_url | length > 0

- name: create S3 bucket
  shell:
    'aws s3api create-bucket --bucket {{ s3.bucket_name }}'
  args:
    executable: /bin/bash
  become_user: '{{ dataverse.payara.user }}'
  environment:
    PATH: "{{ lookup('env', 'PATH') }}:/usr/local/bin"
  when: s3.create_bucket == true
    and custom_endpoint_url | length == 0

- name: "place s3_cors.json template"
  template:
    src: s3_cors.json.j2
    dest: '~{{ dataverse.payara.user }}/s3_cors.json'
    owner: '{{ dataverse.payara.user }}'
    group: '{{ dataverse.payara.group }}'
    mode: 0644
  when: (s3.download_redirect == true or s3.upload_redirect == true)
    and s3.cors_already_set == false

- name: enable CORS on S3 bucket
  shell:
    'aws s3api put-bucket-cors --bucket {{ s3.bucket_name }} --cors-configuration file://~{{ dataverse.payara.user }}/s3_cors.json'
  args:
    executable: /bin/bash
  become: yes
  become_user: '{{ dataverse.payara.user }}'
  environment:
    PATH: "{{ lookup('env', 'PATH') }}:/usr/local/bin"
  when: (s3.download_redirect == true or s3.upload_redirect == true)
    and custom_endpoint_url | length == 0
    and s3.cors_already_set == false
- name: set s3 direct download
  shell: 'asadmin-create-or-replace-option.sh "dataverse.files.s3.download-redirect" "{{ s3.download_redirect }}"'
  register: output
  changed_when: "'Command create-jvm-options executed successfully.' in output.stdout"

