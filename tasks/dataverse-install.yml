---
# dataverse/tasks/dataverse-install.yml

# version numbers changed on github. only used this because files were missing from install.zip
#- name: clone {{ dataverse.version }} from git. optimally replace install.zip with this.
#  git: repo=git://github.com/IQSS/dataverse.git dest=/tmp/dataverse_{{ dataverse.version }} version={{ dataverse.version }}
#       clone=yes depth=1 accept_hostkey=true

- name: run dataverse installer
  debug:
    msg: '##### DATAVERSE INSTALLER #####'

# this is necessary for the installer. dataverse-storage.yml does the real work later.
- name: filesdir must pre-exist
  ansible.builtin.file:
    path: '{{ dataverse.filesdirs[0].path }}'
    state: directory
    owner: '{{ dataverse.payara.user }}'
    group: '{{ dataverse.payara.group }}'

- ansible.builtin.import_tasks: dataverse-build.yml
  when: dataverse_branch != "release"
  
- name: fix perms on dataverse-war
  file: path=/tmp/dvinstall/dataverse.war mode=0644

- name: grab branch copies of installer source when using branch
  copy:
    src: '{{ dataverse.srcdir }}/scripts/installer/{{ item }}'
    dest: '/tmp/dvinstall/{{ item }}'
    mode: '0755'
    remote_src: yes
  with_items:
    - install.py
    - installConfig.py
    - installAppServer.py
    - installUtils.py
    - as-setup.sh
  when: dataverse_branch != 'release'

- name: grab branch api setup scripts as well when using branch
  copy:
    src: '{{ dataverse.srcdir }}/scripts/api/{{ item }}'
    dest: '/tmp/dvinstall/{{ item }}'
    mode: '0755'
    remote_src: yes
  with_items:
    - post-install-api-block.sh
    - setup-all.sh
    - setup-builtin-roles.sh
    - setup-datasetfields.sh
    - setup-dvs.sh
    - setup-identity-providers.sh
    - setup-users.sh
  when: dataverse_branch != 'release'

- name: copy jhove files from branch
  copy:
    src: "{{ item }}"
    dest: "/tmp/dvinstall/"
    remote_src: yes
  with_items:
    - "{{ dataverse.srcdir }}/conf/jhove/jhove.conf"
    - "{{ dataverse.srcdir }}/conf/jhove/jhoveConfig.xsd"
  when: dataverse_branch != 'release'

- name: set dataverse adminpass in setup-all
  lineinfile:
    path: /tmp/dvinstall/setup-all.sh
    regexp: '^DV_SU_PASSWORD'
    line: 'DV_SU_PASSWORD="{{ dataverse.adminpass }}"'

- name: ensure as-setup.sh is executable
  file:
    path: /tmp/dvinstall/as-setup.sh
    mode: 0755
  when: dataverse.payara.zipurl is not match(".*glassfish-4.1.zip")

- name: register default_config
  set_fact:
    default_config: '{{ dataverse.default.config }}'

- name: place default.config template
  template:
    src: default.config.j2
    dest: /tmp/dvinstall/default.config
    owner: root
    group: root
    mode: 0644
  when: default_config|length == 0

- name: place default.config
  copy:
    src: default.config
    dest: /tmp/dvinstall/default.config
    owner: '{{ dataverse.payara.user }}'
    group: '{{ dataverse.payara.group }}'
    mode: 0600
  when: default_config|length > 0

- ansible.builtin.import_tasks: jacoco-instrument.yml
  when: dataverse.jacoco.enabled == true and
        dataverse_repo != "release"

- name: allow installer write access
  file:
    path: /tmp/dvinstall
    owner: '{{ dataverse.payara.user }}'

- name: patch installAppServer.py so that FILES_DIR points to the correct location
  lineinfile:
    path: /tmp/dvinstall/installAppServer.py
    regexp: "^   os.environ..FILES_DIR.. = "
    line: "   os.environ['FILES_DIR'] = \"{{ dataverse.filesdirs[0].path }}\""
  when: dataverse.filesdirs[0] is defined and
        dataverse.payara.zipurl is not match(".*glassfish-4.1.zip")

- name: patch as-setup.sh so it doesn't hardcode siteUrl
  lineinfile:
    path: /tmp/dvinstall/as-setup.sh
    regexp: '(.*)-Ddataverse.siteUrl(.*)'
    line: '  ./asadmin $ASADMIN_OPTS create-jvm-options "\-Ddataverse.siteUrl={{ siteUrl_escaped }}"'
  when: dataverse.payara.zipurl is not match(".*glassfish-4.1.zip")

- name: ensure python3 is present
  set_fact:
    python_bin: '/usr/bin/python3'
  when:
  - ansible_os_family == "RedHat" and
    (ansible_distribution_major_version == "8") or (ansible_distribution_major_version == "9")

- name: Debian only offers Python3 nowadays
  set_fact:
    python_bin: '/usr/bin/python3'
  when: ansible_os_family == "Debian"

- name: fire off installer
  shell: '{{ python_bin }} /tmp/dvinstall/install.py -f --config_file=default.config --noninteractive > /tmp/dvinstall/install.out 2>&1'
  become: yes
  become_user: '{{ dataverse.payara.user }}'
  args:
    chdir: /tmp/dvinstall
  when: not dataverse.deployment.upgrade_only

- name: upgrade only -- deploy dataverse war
  shell: '{{ payara_dir }}/bin/asadmin redeploy --name dataverse /tmp/dvinstall/dataverse.war'
  become: yes
  become_user: '{{ dataverse.payara.user }}'
  when: dataverse.deployment.upgrade_only

- name: stop payara manually (systemd gums up the works)
  become: yes
  become_user: "{{ dataverse.payara.user }}"
  shell: '{{ payara_dir }}/bin/asadmin stop-domain {{ dataverse.payara.domain }}'
  ignore_errors: yes
  when: not dataverse.deployment.upgrade_only

- name: now start payara with systemd
  service:
    name: payara
    state: started

- name: wait for payara to become ready
  wait_for:
    port: 8009
    state: present
    timeout: "{{ dataverse.payara.launch_timeout }}"

- name: really wait for Payara to become ready
  ansible.builtin.pause:
    seconds: 120

# install.py doesn't currently log this output, nothing sensitive in install.out
#- name: negate need for password aliases
#  file:
#    name: /tmp/as-setup.out
#    mode: 0600
#  ignore_errors: yes
